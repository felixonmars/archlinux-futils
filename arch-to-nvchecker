#!/usr/bin/env python

import argparse
from dataclasses import dataclass

import pyalpm
from nvchecker import core as nvchecker_core
from nvchecker.util import RichResult

PREFIX_MAP = {
    'pypi': 'python-',
    'cpan': 'perl-',
    'hackage': 'haskell-',
    'gems': 'ruby-',
    'npm': 'nodejs-',
}
@dataclass
class ParserArgs:
    """Define argument types to support argument type hints"""

    update: bool
    db: list[str]
    newer: bool


def main() -> None:
    parser = argparse.ArgumentParser(description='Check or update nvchecker oldver db from pacman sync db')
    parser.add_argument('-u', '--update', action='store_true',
                        help='Actually update nvchecker db after printing the difference')
    parser.add_argument('--db', nargs='*', default=['core-testing', 'core', 'extra-testing', 'extra',
                                                    'multilib-testing', 'multilib'],
                        help='Pacman sync db to consider. Defaulting to all with testing and multilib enabled')
    parser.add_argument('-n', '--newer', action='store_true',
                        help='Only consider entry when pacman version is not newer than newver (useful when Arch bumped to an alpha, etc)')
    args = ParserArgs(**vars(parser.parse_args()))

    nvchecker_config = nvchecker_core.get_default_config()
    nvchecker_entries, nvchecker_options = nvchecker_core.load_file(nvchecker_config, use_keymanager=False)

    # TODO(C0rn3j): nvchecker_options.ver_files can be None
    oldvers = nvchecker_core.read_verfile(nvchecker_options.ver_files[0])
    newvers = nvchecker_core.read_verfile(nvchecker_options.ver_files[1])

    handle = pyalpm.Handle('.', '/var/lib/pacman')

    archvers = {}
    for db in args.db:
        db_handle = handle.register_syncdb(db, 0)
        for package in db_handle.search(''):
            if package.name in archvers:
                continue
            archvers[package.name] = package.version.split('-')[0]
            if ':' in archvers[package.name]:
                archvers[package.name] = archvers[package.name].split(':')[1]

    for entry_name in newvers:
        pkgname = entry_name

        if pkgname not in nvchecker_entries:
            # Entry recently removed
            continue

        entry = nvchecker_entries[pkgname]

        if entry.get('arch_ignored'):
            continue

        if _pkgname := entry.get('arch_pkgname'):
            pkgname = _pkgname
        else:
            pkgname = PREFIX_MAP.get(entry['source'], '') + pkgname.lower()

            if pkgname not in archvers and '_' in pkgname:
                pkgname = pkgname.replace('_', '-')

            if pkgname not in archvers and '.' in pkgname:
                pkgname = pkgname.replace('.', '-')

            if pkgname not in archvers and pkgname != entry_name:
                pkgname = entry_name
                if pkgname not in archvers:
                    pkgname = pkgname.lower()

        if pkgname not in archvers:
            continue

        archver = archvers[pkgname]
        oldver = oldvers.get(entry_name, None)
        if oldver is not None:
            oldver = oldver.version
        if archver != oldver:
            if oldver is not None and (oldver + '.0' == archver or archver + '.0' == oldver):
                continue

            if args.newer and pyalpm.vercmp(archver, newvers[entry_name]) > 0:
                continue

            print(pkgname, oldver, '->', archver)
            oldvers[entry_name] = RichResult(version=archver)

    if args.update:
        nvchecker_core.write_verfile(nvchecker_options.ver_files[0], oldvers)


if __name__ == '__main__':
    main()
